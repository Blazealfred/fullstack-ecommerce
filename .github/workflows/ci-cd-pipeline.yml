name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [dev]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Backend Image
        run: docker build -t backend-app ./backend

      - name: Build Frontend Image
        run: docker build -t frontend-app ./frontend

      - name: Run Backend Tests
        run: |
          cd backend && npm install && npm test

      - name: Run Frontend Tests
        run: |
          cd frontend && npm install && npm test

  security-scan:
    name: Run OWASP ZAP Security Scan
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose  # ✅ Fix: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start Docker Compose Services
        run: docker-compose up -d

      - name: Wait for the frontend to start
        run: sleep 20  # ✅ Added delay to ensure services start

      - name: Check if frontend is running
        run: |
          docker ps
          curl -I http://localhost:8080 || exit 1  # ✅ Ensure frontend is accessible

      - name: Run OWASP ZAP Scan
        run: |
          docker run --network ecommerce_default -t ghcr.io/zaproxy/zaproxy zap-baseline.py -t http://localhost:8080
          
  push-to-ecr:
    name: Push Docker Images to AWS ECR
    needs: security-scan  # Runs only if security scan succeeds
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <AWS_ACCOUNT_ID>.dkr.ecr.us-east-1.amazonaws.com

      - name: Push Backend Image to ECR
        run: |
          docker tag backend-app <AWS_ACCOUNT_ID>.dkr.ecr.us-east-1.amazonaws.com/backend-app:latest
          docker push <AWS_ACCOUNT_ID>.dkr.ecr.us-east-1.amazonaws.com/backend-app:latest

      - name: Push Frontend Image to ECR
        run: |
          docker tag frontend-app <AWS_ACCOUNT_ID>.dkr.ecr.us-east-1.amazonaws.com/frontend-app:latest
          docker push <AWS_ACCOUNT_ID>.dkr.ecr.us-east-1.amazonaws.com/frontend-app:latest

  deploy:
    name: Deploy to AWS EC2 with Terraform
    needs: push-to-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
