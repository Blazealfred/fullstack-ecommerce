name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  FRONTEND_ECR: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend
  BACKEND_ECR: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend Docker Image
        run: |
          docker build -t ecommerce-backend:latest ./backend
          echo "BACKEND_IMAGE_ID=$(docker images -q ecommerce-backend:latest)" >> $GITHUB_ENV

      - name: Build Frontend Docker Image
        run: |
          docker build -t ecommerce-frontend:latest ./frontend
          echo "FRONTEND_IMAGE_ID=$(docker images -q ecommerce-frontend:latest)" >> $GITHUB_ENV

  push_to_ecr:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate with AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $BACKEND_ECR

      - name: Tag and Push Frontend Image
        run: |
          if [[ -z "$FRONTEND_IMAGE_ID" ]]; then echo "Error: FRONTEND_IMAGE_ID is empty"; exit 1; fi
          docker tag $FRONTEND_IMAGE_ID $FRONTEND_ECR:latest
          docker push $FRONTEND_ECR:latest

      - name: Tag and Push Backend Image
        run: |
          if [[ -z "$BACKEND_IMAGE_ID" ]]; then echo "Error: BACKEND_IMAGE_ID is empty"; exit 1; fi
          docker tag $BACKEND_IMAGE_ID $BACKEND_ECR:latest
          docker push $BACKEND_ECR:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push_to_ecr
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS EC2 using Terraform
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
