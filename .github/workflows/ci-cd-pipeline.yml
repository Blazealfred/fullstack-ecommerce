name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  FRONTEND_ECR: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend
  BACKEND_ECR: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend
  SONAR_HOST_URL: "http://your-sonarqube-server"  # Replace with SonarQube URL
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend Docker Image
        run: docker build -t ecommerce-backend:latest ./backend

      - name: Build Frontend Docker Image
        run: docker build -t ecommerce-frontend:latest ./frontend

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Unit Tests (Example)
        run: echo "Run backend and frontend tests here"

  security_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Install SonarQube Scanner
      run: |
       wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
       unzip sonar-scanner.zip
       sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
       echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

    - name: SonarQube Scan
      env:
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
       sonar-scanner \
         -Dsonar.projectKey=ecommerce \
         -Dsonar.sources=. \
         -Dsonar.host.url=$SONAR_HOST_URL \
         -Dsonar.login=$SONAR_TOKEN



  push_to_ecr:
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate Docker with AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $FRONTEND_ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $BACKEND_ECR

      - name: Tag and Push Frontend Image
        run: |
          docker tag ecommerce-frontend:latest $FRONTEND_ECR:latest
          docker push $FRONTEND_ECR:latest

      - name: Tag and Push Backend Image
        run: |
          docker tag ecommerce-backend:latest $BACKEND_ECR:latest
          docker push $BACKEND_ECR:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push_to_ecr
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Changes
        run: terraform apply -auto-approve

  monitoring:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Manual Monitoring Setup (Reminder)
        run: echo "Remember to set up Prometheus & Grafana on your EC2 instance manually!"
